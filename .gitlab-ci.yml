image: registry.gitlab.com/nikolayradoev/docker-images/chrome-mongo-node:20233

cache:
    key: "${CI_COMMIT_REF_SLUG}-client"
    paths:
        - client/node_modules/
        - server/node_modules/
    policy: pull

.only-client: &only-client
    only:
        refs:
            - master
            - merge_requests
        changes:
            - client/**/*
            - common/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
        policy: pull

.only-server: &only-server
    only:
        refs:
            - master
            - merge_requests
        changes:
            - server/**/*
            - common/**/*
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
        policy: pull

stages:
    - install
    - lint
    - test
    - deploy

install:client:
    stage: install
    <<: *only-client
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-client"
        paths:
            - client/node_modules/
            - client/.npm/
        policy: pull-push

install:server:
    stage: install
    <<: *only-server
    script:
        - cd server
        - npm ci --cache .npm --prefer-offline
    cache:
        key: "${CI_COMMIT_REF_SLUG}-server"
        paths:
            - server/node_modules/
            - server/.npm/
        policy: pull-push

lint:client:
    stage: lint
    needs: ["install:client"]
    allow_failure: true
    <<: *only-client
    script:
        - cd client
        - npm run lint

lint:server:
    stage: lint
    needs: ["install:server"]
    allow_failure: true
    <<: *only-server
    script:
        - cd server
        - npm run lint

test:client:
    stage: test
    needs: ["install:client"]
    <<: *only-client
    script:
        - Xvfb :99 -ac -screen 0 1920x1080x24 &
        - cd client
        - npm run coverage -- --browsers=ChromeHeadlessNoSandbox --watch=false
    dependencies:
        - install:client
    artifacts:
        paths:
            - client/coverage/

test:server:
    stage: test
    needs: ["install:server"]
    <<: *only-server
    script:
        - cd server
        - npm run coverage
    dependencies:
        - install:server
    artifacts:
        paths:
            - server/coverage/

pages:
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - cd client
        - npm ci --cache .npm --prefer-offline
        - npm run deploy -- --base-href $BASE_HREF
        - mkdir ../public
        - mv dist/client/* ../public/
    artifacts:
        paths:
            - public

variables:
    EC2_USER: ec2-user
    ORIGIN: "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}"

deploy:server:
    stage: deploy
    rules:
        - if: "$CI_COMMIT_TAG =~ /deploy/"
          when: manual
    script:
        - "which ssh-agent || (apt-get update -qq && apt-get install -qq openssh-client )"
        - eval $(ssh-agent -s)
        - ssh-add <(echo "$EC2_PEM_FILE_CONTENT")
        - mkdir -p ~/.ssh
        - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - |
            timeout 600 ssh -t -oStrictHostKeyChecking=no -o ServerAliveInterval=15 -o ServerAliveCountMax=5 "${EC2_USER}@${EC2_HOST}" "
                set -e

                echo 'Update repository cache'
                sudo yum update -y

                echo 'Setting up swap memory'
                if test -f '/swapfile'
                then
                    echo 'swap memory is already configured, skipping...'
                else
                    sudo dd if=/dev/zero of=/swapfile bs=128M count=16
                    sudo chmod 600 /swapfile
                    sudo mkswap -f /swapfile
                    sudo swapon /swapfile
                    echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
                fi

                echo 'Setting up git'
                if which git &> /dev/null
                then
                    echo 'git is already installed, skipping...'
                else
                    sudo yum install -y git
                fi

                echo 'Setting up node'
                if which node &> /dev/null
                then
                    echo 'node is already installed, skipping...'
                else
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
                    source ~/.nvm/nvm.sh
                    nvm install 18
                    nvm alias default 18
                fi

                echo 'Setting up forever'
                if which forever &> /dev/null
                then
                    echo 'forever is already installed, skipping...'
                else
                    npm install forever -g
                fi

                echo 'Setting up amazon-cloudwatch-agent'
                if yum list installed amazon-cloudwatch-agent &> /dev/null
                then
                    echo 'amazon-cloudwatch-agent is already installed, skipping...'
                else
                    sudo yum install -y amazon-cloudwatch-agent
                    sudo amazon-cloudwatch-agent-ctl -a start -m ec2
                fi

                set -xv

                # Force kill any node app or any app running on the server port
                forever stopall && sudo fuser -k '${SERVER_PORT}/tcp' && sudo killall node

                # Clone the repository
                git clone ${ORIGIN} repo || echo Git repository already exist
                cd repo

                # Update the remote origin
                # This action is important because the CI_JOB_TOKEN become invalid after each pipeline
                git remote remove origin
                git remote add origin ${ORIGIN}

                # Checkout to the targeted commit
                git fetch --all
                git checkout ${CI_COMMIT_SHA}

                # Build the project
                cd server
                npm ci
                npm run build

                # Create /var/log/messages file if not exists
                [[ -f /var/log/messages ]] || sudo touch /var/log/messages
                sudo chmod 777 /var/log/messages
                
                # Refresh amazon-cloudwatch-agent config
                sudo amazon-cloudwatch-agent-ctl -a fetch-config -s -m ec2 -c file:../amazon-cloudwatch-agent-config.json

                # Launch the server in background and append output to /var/log/messages for CloudWatch
                PORT=${SERVER_PORT} forever start -a -l /var/log/messages out/server/app/index.js
            "
